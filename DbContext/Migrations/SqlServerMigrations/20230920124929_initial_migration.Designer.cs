// <auto-generated />
using System;
using DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DbContext.Migrations.SqlServerMigrations
{
    [DbContext(typeof(csMainDbContext.SqlServerDbContext))]
    [Migration("20230920124929_initial_migration")]
    partial class initial_migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DbModels.csAddressDbM", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("DbModels.csAttractionDbM", b =>
                {
                    b.Property<Guid>("AttractionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.Property<Guid?>("csPersonDbMPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AttractionId");

                    b.HasIndex("csPersonDbMPersonId");

                    b.ToTable("Attractions");
                });

            modelBuilder.Entity("DbModels.csCommentDbM", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.HasKey("CommentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DbModels.csPersonDbM", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdressID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.HasKey("PersonId");

                    b.HasIndex("AdressID");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("csCommentDbMcsPersonDbM", b =>
                {
                    b.Property<Guid>("CommentsDbmCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonDbMsPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CommentsDbmCommentId", "PersonDbMsPersonId");

                    b.HasIndex("PersonDbMsPersonId");

                    b.ToTable("csCommentDbMcsPersonDbM");
                });

            modelBuilder.Entity("DbModels.csAttractionDbM", b =>
                {
                    b.HasOne("DbModels.csPersonDbM", "csPersonDbM")
                        .WithMany("AttractionsDbm")
                        .HasForeignKey("csPersonDbMPersonId");

                    b.Navigation("csPersonDbM");
                });

            modelBuilder.Entity("DbModels.csPersonDbM", b =>
                {
                    b.HasOne("DbModels.csAddressDbM", "CsAddressDbM")
                        .WithMany("PersonDbMs")
                        .HasForeignKey("AdressID");

                    b.Navigation("CsAddressDbM");
                });

            modelBuilder.Entity("csCommentDbMcsPersonDbM", b =>
                {
                    b.HasOne("DbModels.csCommentDbM", null)
                        .WithMany()
                        .HasForeignKey("CommentsDbmCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbModels.csPersonDbM", null)
                        .WithMany()
                        .HasForeignKey("PersonDbMsPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbModels.csAddressDbM", b =>
                {
                    b.Navigation("PersonDbMs");
                });

            modelBuilder.Entity("DbModels.csPersonDbM", b =>
                {
                    b.Navigation("AttractionsDbm");
                });
#pragma warning restore 612, 618
        }
    }
}
